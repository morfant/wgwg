#입력
#공통
[주제] = logical

# for Synthdef
[final amplitude] = 약 -6dB 
[Panning] = chaotic
[Main Synthesis method] = choose one of these [Rich Additive, waveshaping]
[reverberation of sound] = 80 out of 100
[highlight band] = low-mid
[Out bus number] = 100

#for Pdef
[Complexity of pattern] = high, middle, low 중에 high
[repeat of each pattern class] = less than 20. (Never let it be 'inf'!)
[Number of melody line] = 3
[Number of notes on each melody line] = about 10
[Dur of each note] = 0.2 ~ 0.1 seconds
[Scale concept] = major 

#처리
상단의 입력을 참고해 소리를 Synthdef형식으로, 그 소리들의 시퀀스를 Pdef 형식으로 만들어줘. 

#출력
Supercollider 코드를 상단에는 Synthdef를 서버에 등록할 수 있게 만들어줘.
하단에는 그 Synthdef를 instrument로 사용하는 Pdef 형식의 패턴을 서버에 등록할 수 있게 만들어줘.
Synthdef 코드와 Pdef 코드를 한 번에 실행할 수 있게, 둘 모두 더 큰 소괄호 블럭 안에 있게 만들어줘.
Pdef 코드의 마지막은 .play 메소드를 사용해줘.
Pbind 안에 들어가는 Pseq 등의 pattern 클래스들의 repeat 아규먼트는 절대 'inf' 로 설정하지 말아줘.
SynthDef의 Pdef의 이름을 동일하게 만들어줘.

#형식
결과에는 Supercollider 코드 외에는 아무것도 포함시키지 말아줘록
전체 형식은 마크다운 문법으로 code block이 되도록 해줘.
코드의 맨 첫 줄 에는 '// Synthdef'라고 적어줘.
코드의 두 번째 줄 에는 '// '에 이어서 SynthDef의 이름으로 사용할 문자열을 대소문자까지 동일하게 영어로 넣어줘.
#출력에서 언급한 '전체를 감싸는 소괄호 블럭'은 위의 두 줄 이후에 나오도록 해줘.


#주의사항
Pdef의 마지막에는 .add 메소드가 오지 않게 해줘.
PmidiCps라는 Class는 존재하지 않아.
ListPattern (Pseq) requires a non-empty collection.



Demand를 반드시 사용할 필요는 없어.
Demand UGen을 사용하는 경우 반복횟수에는 inf를 사용하지 말아줘.
만약 Demand 를 사용할 때는 아래 내용을 확인해줘.

Demand.ar(trig, reset, demandUGens)

'trig' argument of Demand Class has to be audio rate UGen.

Argument:
    trig	
        It has to be Audio rate UGen. Trigger. Can be any signal. A trigger happens when the signal changes from non-positive to positive.
    reset	
        Trigger. Resets the list of UGens when triggered.
    demandUGens	
        List of demand-rate UGens to get values from. When the shortest stream ends, this ugen will set the 'done' flag.
        'repeat' of any demandUGens shoud not be 'inf'. 


var 를 이용해 지역변수를 정의 할 때는 반드시 함수가 시작되자마자 진행해줘.
Buffer로 불러올 오디오 샘플이 필요할 때는 /Users/giy/WGWG/server/backend/static/sample.wav 를 사용해줘.